import configparser
from pathlib import Path

path = Path(__file__).parent
parser = configparser.ConfigParser()
parser.read(f"{path}/urls.conf")

# fmt: off
BTC_TOPIC_NAME = parser.get("TOPICNAME", "BTC_TOPIC_NAME")
ETH_TOPIC_NAME = parser.get("TOPICNAME", "ETHER_TOPIC_NAME")
# OTHER_TOPIC_NAME = parser.get("TOPICNAME", "OTHER_TOPIC_NAME")

REST_BTC_AVERAGE_TOPIC_NAME = parser.get("AVERAGETOPICNAME", "BTC_REST_AVERAGE_TOPIC_NAME")
REST_ETH_AVERAGE_TOPIC_NAME = parser.get("AVERAGETOPICNAME", "ETHER_REST_AVERAGE_TOPIC_NAME")
SOCKET_BTC_AVERAGE_TOPIC_NAME = parser.get("AVERAGETOPICNAME", "BTC_SOCKET_AVERAGE_TOPIC_NAME")
SOCKET_ETH_AVERAGE_TOPIC_NAME = parser.get("AVERAGETOPICNAME", "ETHER_SOCKET_AVERAGE_TOPIC_NAME")


BTC_TOPIC_NAME = parser.get("TOPICNAME", "BTC_TOPIC_NAME")
ETH_TOPIC_NAME = parser.get("TOPICNAME", "ETHER_TOPIC_NAME")

REST_UPBIT_URL = parser.get("APIURL", "UPBIT")
REST_BITHUMB_URL = parser.get("APIURL", "BITHUMB")
REST_KORBIT_URL = parser.get("APIURL", "KORBIT")
REST_COINONE_URL = parser.get("APIURL", "COINONE")

SOCKET_UPBIT_URL = parser.get("SOCKETURL", "UPBIT")
SOCKET_BITHUMB_URL = parser.get("SOCKETURL", "BITHUMB")
SOCKET_KORBIT_URL = parser.get("SOCKETURL", "KORBIT")
SOCKET_COINONE_URL = parser.get("SOCKETURL", "COINONE")


MAXLISTSIZE = 10

UPBIT_BTC_REAL_TOPIC_NAME = parser.get("REALTIMETOPICNAME", "UPBIT_BTC_REAL_TOPIC_NAME")
BITHUMB_BTC_REAL_TOPIC_NAME = parser.get("REALTIMETOPICNAME", "BITHUMB_BTC_REAL_TOPIC_NAME")
KORBIT_BTC_REAL_TOPIC_NAME = parser.get("REALTIMETOPICNAME", "KORBIT_BTC_REAL_TOPIC_NAME")
COINONE_BTC_REAL_TOPIC_NAME = parser.get("REALTIMETOPICNAME", "COINONE_BTC_REAL_TOPIC_NAME")


# KAFKA
BOOTSTRAP_SERVER = parser.get("KAFKA", "bootstrap_servers")
SECURITY_PROTOCOL = parser.get("KAFKA", "security_protocol")
MAX_BATCH_SIZE = parser.get("KAFKA", "max_batch_size")
MAX_REQUEST_SIZE = parser.get("KAFKA", "max_request_size")
ARCKS = parser.get("KAFKA", "acks")


# API key
BINANCE_KEY = parser.get("KEY", "BINANCE_KEY")
BINANCE_SECRET_KEY = parser.get('KEY', "BINANCE_SECRET_KEY")
